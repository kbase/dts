{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>The Data Transfer Service (DTS) is a web service that handles requests for file transfers between participating organizations interested in exchanging biological and bioinformatical data. The DTS coordinates provides a single point of access for these organizations, allowing an end user or another service to</p> <ul> <li>search for datasets / files within any participating organization based on   criteria specified in an ElasticSearch   style query</li> <li>select any or all files from a search and request a transfer from the source   organization to another participating organization</li> </ul> <p>DTS is designed for easy deployment and maintenance behind a gateway that provides TLS/SSL encryption. Requests to the DTS include headers with authentication information, so these requests rely on the HTTPS protocol to protect this information.</p> <p>It's very easy to deploy DTS in a Docker environment and configure it using environment variables.</p>"},{"location":"admin/index.html","title":"DTS Administrator Guide","text":"<ul> <li>Installing DTS Locally</li> <li>Deploying DTS via Docker</li> <li>Configuring DTS</li> <li>Granting DTS Access to a Globus Endpoint</li> </ul> <p>More soon!</p>"},{"location":"admin/config.html","title":"Configuring DTS","text":"<p>You can configure a DTS instance by creating a YAML text file similar to dts.yaml.example in the repository. Typically this file is named <code>dts.yaml</code>, and is passed as an argument to the <code>dts</code> executable. Here we describe the different sections in this file and how they affect your DTS instance.</p>"},{"location":"admin/config.html#configuration-file-sections","title":"Configuration File Sections","text":"<p>Click on any of the links below to see the relevant details for a section.</p> <ul> <li>service: configure\u0455 settings for the DTS web service   such as the port on which it listens, the maximum number of connections,   intervals for polling and scrubbing completed tasks, data directories, and   diagnostics</li> <li>endpoints: configures the endpoints used to transfer   files from one place to another</li> <li>databases: configures databases for organizations that   integrate with the DTS</li> </ul> <p>Each of these sections is described below, with a motivating example.</p>"},{"location":"admin/config.html#service","title":"<code>service</code>","text":"<pre><code>service:\n  port: 8080\n  max_connections: 100\n  poll_interval:   60000\n  endpoint: globus-local\n  data_dir: /path/to/dir\n  delete_after: 604800\n  debug: true\n</code></pre> <p>TODO: write some stuff!</p>"},{"location":"admin/config.html#endpoints","title":"<code>endpoints</code>","text":"<pre><code>endpoints:\n  globus-local:\n    name: name-of-local-endpoint\n    id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    provider: globus\n    auth:\n      client_id: &lt;ID of client with authentication secret&gt;\n      client_secret: &lt;secret&gt;\n  globus-jdp:\n    name: name-of-jdp-endpoint\n    id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    provider: globus\n    auth:\n      client_id: &lt;ID of client with authentication secret&gt;\n      client_secret: &lt;secret&gt;\n  globus-kbase:\n    name: name-of-kbase-endpoint\n    id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    provider: globus\n    auth:\n      client_id: &lt;ID of client with authentication secret&gt;\n      client_secret: &lt;secret&gt;\n</code></pre> <p>TODO: Things and stuff</p>"},{"location":"admin/config.html#databases","title":"<code>databases</code>","text":"<pre><code>databases:\n  jdp:\n    name: JGI Data Portal\n    organization: Joint Genome Institute\n    endpoint: globus-jdp\n  kbase:\n    name: KBase Workspace Service (KSS)\n    organization: KBase\n    endpoint: globus-kbase\n</code></pre> <p>TODO: Alll the things</p>"},{"location":"admin/deployment.html","title":"Deploying DTS via Docker","text":"<p>You can use the <code>Dockerfile</code> and <code>dts.yaml</code> files in the <code>deployment</code> folder to build a Docker image for DTS. The Docker image contains two files:</p> <ol> <li><code>/bin/dts</code>: the statically-linked <code>dts</code> executable</li> <li><code>/etc/dts.yaml</code>: a DTS configuration file with embedded    environment variables that control parameters of interest</li> </ol> <p>This image can be deployed in any Docker-friendly environment. The use of environment variables in the configuration file allows you to configure DTS without regenerating the image.</p>"},{"location":"admin/deployment.html#deploying-to-nerscs-spin-environment","title":"Deploying to NERSC's Spin Environment","text":"<p>DTS is hosted in NERSC's Spin environment under Rancher 2. It runs in the <code>Production</code> environment under the <code>kbase</code> organization. You can read about Spin in NERSC's documentation, and Rancher 2 here. The documentation isn't great, but fortunately there's not a lot to know--most of the materials you'll need are right here in the <code>deployment</code> folder.</p> <p>Deploying DTS to Spin involves</p> <ol> <li>updating and pushing a new Docker image with any code changes and    documentation updates</li> <li>editing the <code>dts</code> Spin deployment via NERSC's    Rancher 2 console</li> </ol> <p>Each of these steps are fairly simple.</p> <p>Before you perform an update, take some time to familiarize yourself with the Rancher 2 console and the <code>dts</code> production deployment. The most important details are:</p> <ul> <li>The service and its supporting executables and configuration data are   supplied by its Docker image</li> <li>Configurable settings for the service are stored in environment variables   that can be set in the Rancher 2 console</li> <li>The DTS data directory (used for keeping track of ongoing tasks and for   generating transfer manifests) resides on the NERSC Community File System   (CFS) under <code>/global/cfs/cdirs/kbase/dts/</code>. This volume is visible to the   service as <code>/data</code>, so the <code>DATA_DIRECTORY</code> environment variable should be   set to <code>/data</code>.</li> <li>The DTS manifest directory (used for writing transfer manifest files that   get transferred to destination endpoints) also resides on the NERSC   Community File System (CFS), but under <code>/global/cfs/cdirs/kbase/gsharing/dts/</code>   so that it is accessible via a Globus endpoint. This volume is visible to   the service as <code>/manifests</code>, so the <code>MANIFEST_DIRECTORY</code> environment variable   should be set to <code>/manifests</code>.</li> </ul> <p>Let's walk through the process of updating and redeploying the DTS in Spin.</p>"},{"location":"admin/deployment.html#1-update-and-push-a-new-docker-image-to-spin","title":"1. Update and Push a New Docker Image to Spin","text":"<p>From within a clone of the DTS GitHub repo, make sure the repo is up to date by typing <code>git pull</code> in the <code>main</code> branch.</p> <p>Then, sitting in the top-level <code>dts</code> source folder of your <code>dts</code>, execute the <code>deploy-to-spin.sh</code> script, passing as arguments</p> <ol> <li>the name of a tag to identify the new Docker image</li> <li>the name of the NERSC user whose permissions are used for CFS</li> <li>the UID of the NERSC user</li> <li>the group used to determine the user's group permissions</li> <li>the GID of the above group</li> </ol> <p>For example,</p> <pre><code>./deployment/deploy-to-spin.sh v1.1 johnson 52710 kbase 54643\n</code></pre> <p>builds a new DTS Docker image for to be run as the user <code>johnson</code>, with the tag <code>v1.1</code>. The script pushes the Docker image to Harbor, the NERSC Docker registry. Make sure the tag indicates the current version of <code>dts</code> (e.g. <code>v1.1</code>) for clarity.</p> <p>After building the Docker image and tagging it, the script prompts you for the NERSC password for the user you specified. This allows it to push the image to Harbor so it can be accessed via the Rancher 2 console.</p>"},{"location":"admin/deployment.html#2-edit-the-deployment-in-rancher-2-and-restart-the-service","title":"2. Edit the Deployment in Rancher 2 and Restart the Service","text":"<p>Now log in to Rancher 2 and navigate to the <code>dts</code> deployment.</p> <ol> <li>Click on the <code>dts</code> pod to view its status and information</li> <li>Click on the three dots near the right side of the screen and select    <code>Edit</code> to update its configuration.</li> <li>If needed, navigate to the <code>Volumes</code> section and edit the CFS directory for    the volume mounted at <code>/data</code>. Usually, this is set to <code>/global/cfs/cdirs/kbase/dts/</code>,    so you usually don't need to edit this. Similarly, check the volume mounted    at <code>/manifests</code> (usually set to <code>/global/cfs/cdirs/kbase/gsharing/manifests/</code>).</li> <li>Edit the Docker image for the deployment, changing the tag after the colon    to match the tag of the Docker image pushed by <code>deploy-to-spin.sh</code> above.</li> <li>Make sure that the Scaling/Upgrade Policy on the Deployment is set to    <code>Recreate: KILL ALL pods, then start new pods.</code> This ensures that the    service in the existing pod can save a record of its ongoing tasks before a    service in a new pod tries to restore them.</li> <li>Click <code>Save</code> to restart the deployment with this new information.</li> </ol> <p>That's it! You've now updated the service with new features and bugfixes.</p>"},{"location":"admin/globus.html","title":"Granting DTS Access to a Globus Endpoint","text":"<p>The Data Transfer Service relies heavily on Globus for performing file transfers between different databases. Globus is an elaborate and continuously evolving platform, so configuring access from an application can be confusing. Here we describe all the things you need to know to grant DTS access to a Globus endpoint.</p>"},{"location":"admin/globus.html#globus-glossary","title":"Globus Glossary","text":"<p>Globus has its own set of terminology that is slightly different from that we've  used to describe DTS, so let's clarify some definitions first.</p> <ul> <li>Globus Endpoint: A Globus endpoint is a server running Globus software,   providing access to a filesystem that can be shared with Globus users. To DTS,   an endpoint is \"a thing that can send and receive files.\"</li> <li>Globus Collection: A Globus Collection is a portion of a filesystem on a   Globus Endpoint associated with roles and permissions for Globus users. It is   not a server--it's a set of metadata that tells Globus which users have what   access privileges on a Globus Endpoint.</li> <li>Globus Guest Collection: A Guest Collection is a Globus Collection that allows   a Globus user to share files on with other Globus users and with applications.   In particular, a Guest Collections is the only mechanism that can provide   client applications with access to resources on Globus endpoints. This is the   closest concept to what DTS considers an endpoint.</li> </ul>"},{"location":"admin/globus.html#setting-up-access-to-a-globus-endpoint","title":"Setting up Access to a Globus Endpoint","text":"<p>This guide gives a complete set of instructions using the terminology above. Below, we briefly summarize the steps in the guide. Of course, you need a Globus user account to play this game.</p> <ol> <li> <p>Obtain an Application/Service Credential for DTS. The credential consists of    a unique client ID and an associated client secret. The client ID can be used to    identify the DTS as an entity that can be granted access permissions. Of course,    the primary instance of the DTS already has one of these.</p> </li> <li> <p>Create a Guest Collection on the Globus Endpoint or on an existing Collection.    Without a Guest Collection, you can't grant the DTS access to anything. You might    have to poke around a bit to find an endpoint or existing collection that (a) you    have access to and (b) that exposes the resources that you want to grant to the    DTS.</p> </li> <li> <p>Grant DTS read or read/write access to the Guest Collection. Since the DTS    has its own client ID, you can grant it access to a Guest Collection just as you    would any other Globus user.</p> </li> </ol> <p>The DTS stores its Globus credentials (client ID, client secret) in environment variables to prevent them from being read from a file or mined from the executable. The deployment section describes how these environment variables are managed in practice.</p>"},{"location":"admin/installation.html","title":"Installing DTS Locally","text":"<p>Here we describe how to build, test, and install the Data Transfer Service in a local environment.</p>"},{"location":"admin/installation.html#building-and-testing","title":"Building and Testing","text":"<p>DTS is written in Go, so you'll need a working Go compiler to build, test, and run it locally. If you have a Go compiler, you can clone this repository and build it from the top-level directory:</p> <pre><code>go build\n</code></pre>"},{"location":"admin/installation.html#running-unit-tests","title":"Running Unit Tests","text":"<p>DTS comes with several unit tests that demonstrate its capabilities, and you can run these tests as you would any other Go project:</p> <pre><code>go test ./...\n</code></pre> <p>You can add a <code>-v</code> flag to see output from the tests.</p> <p>Because DTS is primarily an orchestrator of network resources, its unit tests must be able to connect to and utilize these resources. Accordingly, you must set the following environment variables to make sure DTS can do what it needs to do:</p> <ul> <li><code>DTS_KBASE_DEV_TOKEN</code>: a KBase development token (available to   KBase developers   used to connect to the KBase Auth Server, which provides a context for   authenticating and authorizing DTS for its basic operations</li> <li><code>DTS_KBASE_TEST_ORCID</code>: an ORCID identifier that can be   used to run DTS's unit test. This identifier must match a registered ORCID ID   associated with a KBase user account.</li> <li><code>DTS_KBASE_TEST_USER</code>: the KBase user associated with the ORCID specified   by <code>DTS_KBASE_TEST_ORCID</code>.</li> <li><code>DTS_GLOBUS_CLIENT_ID</code>: a client ID registered using the   Globus Developers   web interface. This ID must be registered specifically for an instance of DTS.</li> <li><code>DTS_GLOBUS_CLIENT_SECRET</code>: a client secret associated with the client ID   specified by <code>DTS_GLOBUS_CLIENT_ID</code></li> <li><code>DTS_GLOBUS_TEST_ENDPOINT</code>: a Globus endpoint used to test DTS's transfer   capabilities</li> <li><code>DTS_JDP_SECRET</code>: a string containing a shared secret that allows the DTS to   authenticate with the JGI Data Portal</li> </ul>"},{"location":"admin/installation.html#installation","title":"Installation","text":"<p>The only remaining step is to copy the <code>dts</code> executable from your source directory to wherever you want it to reside. This executable is statically linked against all libraries, so it's completely portable.</p>"},{"location":"developer/index.html","title":"DTS Developer Guide","text":"<p>This guide explains the internal workings of the Data Transfer Service (DTS).</p>"},{"location":"developer/index.html#code-organization","title":"Code Organization","text":"<p>The following packages implement the features in the Data Transfer Service.</p> <ul> <li>auth: handles the authorization of the DTS using KBase's   authentication/authorization server</li> <li>config: handles the parsing of the DTS YAML configuration   file, placing the data into read-only global variables   for use by other packages</li> <li>credit: defines metadata types used by the Credit Engine to   establish the provenance of transferred data</li> <li>databases: defines database types that implement the   integration of DTS with database providers</li> <li>endpoints: defines endpoint types for file transfer   providers used by DTS, such as Globus</li> <li>frictionless: defines data structures   that describe data for individual files   and packages containing multiple files</li> <li>services: defines types that implement the REST endpoints   provided by the DTS</li> <li>tasks: implements the \"heart\" of the DTS, which creates and   manages transfer tasks through their entire lifecycle</li> </ul>"},{"location":"developer/auth.html","title":"The <code>auth</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/config.html","title":"The <code>config</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/credit.html","title":"The <code>credit</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/databases.html","title":"The <code>databases</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/endpoints.html","title":"The <code>endpoints</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/frictionless.html","title":"The <code>frictionless</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/services.html","title":"The <code>services</code> Package","text":"<p>TODO: stuff goes here.</p>"},{"location":"developer/tasks.html","title":"The <code>tasks</code> Package","text":"<p>TODO: stuff goes here.</p>"}]}