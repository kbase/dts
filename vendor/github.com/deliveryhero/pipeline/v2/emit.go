package pipeline

import "context"

// Emit fans `is ...Item`` out to a `<-chan Item`
func Emit[Item any](is ...Item) <-chan Item {
	out := make(chan Item)
	go func() {
		defer close(out)
		for _, i := range is {
			out <- i
		}
	}()
	return out
}

// Emitter continuously emits new items generated by the next func
// until the context is canceled
func Emitter[Item any](ctx context.Context, next func() Item) <-chan Item {
	out := make(chan Item)
	go func() {
		defer close(out)
		for {
			select {
			case <-ctx.Done():
				return
			default:
				out <- next()
			}
		}
	}()
	return out
}
